While quantitative automation related to trading cryptoassets such as ERC-20 tokens has become relatively commonplace, with
services such as 3Commas and Shrimpy offering user-friendly web-driven
services for even the average crypto trader, not the mention the specialist,
we have not yet seen the emergence of on-chain trading as a phenomenon.
We hypothesize that just like decentralized exchanges (DEXes) that by
now are by some measures more popular than traditional exchanges, process in the space of decentralized finance (DeFi) may enable attractive
online trading automation options.
In this paper we present ChainBot, an approach for creating algorithmic
trading bots with the help of blockchain technology. We show how to
partition the algorithmic computation into on- and off-chain components
in a way that provides a measure of end-to-end integrity, while preserving
the algorithmic “secret sauce”. The end result is a system where an enduser can sign-up for the services of a trading bot, with trust established
via on-chain publicly readable contracts. Our system is enabled with a
careful use of algorithm partitioning and zero-knowledge proofs together
with standard smart contracts available on most modern blockchains.
Our approach offers more transparent access to liquidity and better censorship-resistance compared to traditional off-chain trading approaches both for crypto- and more traditional assets. We show that the
end-to-end costs and execution times are affordable for regular use and
that gas costs can be successfully amortized because trading strategies
are executed on behalf of large user pools. Finally, we show that with
modern layer-2 (L2) technologies, trades issued by the trading bot can
be kept private, which means that algorithmic parameters are difficult
to recover by a chain observer.
With ChainBot, we develop a sample trading bot and train it on historical data, resulting in returns that are up to 2.4× and on average 1.4× the
buy-and-hold strategy, which we use as our baseline. Our measurements
show that across 1000 runs, the end-to-end average execution time for
our system is 48.4 seconds. We demonstrate that the frequency of trading
does not significantly affect the rate of return and Sharpe ratio, which
indicates that we do not have to trade at every block, thereby significantly saving in terms of gas fees. In our implementation, a user who
invests
$1,000 would earn
$105, and spend
$3 on gas; assuming a user
pool of 1,000 subscribers